---
const { language = "fi" } = Astro.props;

// Sample meals data - in a real app, this would come from an API or database
const meals = [
  {
    id: 1,
    title: 'Grilled Salmon Bowl',
    description: 'Fresh Atlantic salmon with quinoa, roasted vegetables, and lemon-dill sauce',
    image: 'https://images.pexels.com/photos/3655916/pexels-photo-3655916.jpeg',
    tags: ['clean', 'pescatarian'],
    macros: {
      calories: 450,
      protein: 35,
      carbs: 45,
      fat: 15
    }
  },
  {
    id: 2,
    title: 'Keto Chicken Alfredo',
    description: 'Zucchini noodles with grilled chicken and creamy keto-friendly Alfredo sauce',
    image: 'https://images.pexels.com/photos/2338407/pexels-photo-2338407.jpeg',
    tags: ['keto', 'clean'],
    macros: {
      calories: 380,
      protein: 28,
      carbs: 8,
      fat: 28
    }
  },
  {
    id: 3,
    title: 'Vegan Buddha Bowl',
    description: 'Colorful bowl with chickpeas, sweet potato, kale, and tahini dressing',
    image: 'https://images.pexels.com/photos/1640777/pexels-photo-1640777.jpeg',
    tags: ['plant-based', 'clean'],
    macros: {
      calories: 420,
      protein: 15,
      carbs: 65,
      fat: 12
    }
  },
  {
    id: 4,
    title: 'Mediterranean Fish Stew',
    description: 'White fish and shellfish in a rich tomato and herb broth',
    image: 'https://images.pexels.com/photos/699953/pexels-photo-699953.jpeg',
    tags: ['pescatarian', 'clean'],
    macros: {
      calories: 310,
      protein: 32,
      carbs: 25,
      fat: 10
    }
  },
  {
    id: 5,
    title: 'Cauliflower Rice Stir-Fry',
    description: 'Low-carb stir-fry with eggs, vegetables, and Asian-inspired sauce',
    image: 'https://images.pexels.com/photos/723198/pexels-photo-723198.jpeg',
    tags: ['keto', 'clean'],
    macros: {
      calories: 280,
      protein: 18,
      carbs: 12,
      fat: 20
    }
  },
  {
    id: 6,
    title: 'Quinoa Power Bowl',
    description: 'Protein-rich quinoa with roasted vegetables and chickpeas',
    image: 'https://images.pexels.com/photos/1095550/pexels-photo-1095550.jpeg',
    tags: ['plant-based', 'clean'],
    macros: {
      calories: 390,
      protein: 14,
      carbs: 58,
      fat: 16
    }
  }
];

const tagStyles = {
  'clean': {
    base: 'border-blue-800 text-blue-800',
    active: 'bg-blue-800 text-white'
  },
  'keto': {
    base: 'border-purple-800 text-purple-800',
    active: 'bg-purple-800 text-white'
  },
  'plant-based': {
    base: 'border-green-800 text-green-800',
    active: 'bg-green-800 text-white'
  },
  'pescatarian': {
    base: 'border-cyan-800 text-cyan-800',
    active: 'bg-cyan-800 text-white'
  }
};

const tagColors = {
  'clean': 'bg-blue-100 text-blue-800',
  'keto': 'bg-purple-100 text-purple-800',
  'plant-based': 'bg-green-100 text-green-800',
  'pescatarian': 'bg-cyan-100 text-cyan-800'
};

// Get unique tags from meals
const uniqueTags = [...new Set(meals.flatMap(meal => meal.tags))];
---

<section class="py-16">
  <div class="container mx-auto px-6">
    <!-- Filter Bar -->
    <div class="mb-12">
      <h2 class="text-2xl font-bold text-gray-900 mb-6">Filter by Diet Type</h2>
      <div class="flex flex-wrap gap-4" id="filterBar">
        {uniqueTags.map(tag => (
          <button
            class={`px-6 py-2 rounded-full border-2 transition-all duration-200 filter-button bg-white ${tagStyles[tag].base}`}
            data-tag={tag}
            data-active-class={tagStyles[tag].active}
            data-base-class={tagStyles[tag].base}
          >
            {tag}
          </button>
        ))}
      </div>
    </div>

    <!-- Meal Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {meals.map(meal => (
        <article class="meal-card bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow" data-tags={meal.tags.join(',')}>
          <div class="relative h-48">
            <img 
              src={meal.image} 
              alt={meal.title}
              class="w-full h-full object-cover"
            />
          </div>
          
          <div class="p-6">
            <h3 class="text-xl font-bold text-gray-900 mb-2">{meal.title}</h3>
            <p class="text-gray-600 mb-4">{meal.description}</p>
            
            <div class="flex flex-wrap gap-2 mb-4">
              {meal.tags.map(tag => (
                <span class={`px-3 py-1 rounded-full text-sm font-medium ${tagColors[tag]}`}>
                  {tag}
                </span>
              ))}
            </div>

            <div class="grid grid-cols-4 gap-2 py-4 border-t border-gray-100">
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.macros.calories}</span>
                <span class="text-xs text-gray-500">kcal</span>
              </div>
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.macros.protein}g</span>
                <span class="text-xs text-gray-500">protein</span>
              </div>
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.macros.carbs}g</span>
                <span class="text-xs text-gray-500">carbs</span>
              </div>
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.macros.fat}g</span>
                <span class="text-xs text-gray-500">fat</span>
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

<script>
  let activeFilters = new Set();

  function updateMealVisibility() {
    const mealCards = document.querySelectorAll('.meal-card');
    
    if (activeFilters.size === 0) {
      // If no filters are active, show all meals
      mealCards.forEach(card => card.style.display = 'block');
      return;
    }

    mealCards.forEach(card => {
      const cardTags = new Set(card.dataset.tags.split(','));
      // Show card if it has ALL active filters
      const shouldShow = Array.from(activeFilters).every(filter => cardTags.has(filter));
      card.style.display = shouldShow ? 'block' : 'none';
    });
  }

  // Set up filter buttons
  document.querySelectorAll('.filter-button').forEach(button => {
    button.addEventListener('click', () => {
      const tag = button.dataset.tag;
      const activeClass = button.dataset.activeClass;
      const baseClass = button.dataset.baseClass;
      
      if (activeFilters.has(tag)) {
        // Remove filter
        activeFilters.delete(tag);
        button.classList.remove(...activeClass.split(' '));
        button.classList.add(...baseClass.split(' '));
      } else {
        // Add filter
        activeFilters.add(tag);
        button.classList.remove(...baseClass.split(' '));
        button.classList.add(...activeClass.split(' '));
      }
      
      updateMealVisibility();
    });
  });
</script>