---
import { API_BASE_URL } from '../../config/api';

const { language = "fi" } = Astro.props;


let response = await fetch(`${API_BASE_URL}/api/single-meals?populate[dietary_categories]=true&populate[image]=true&locale=${language}`);
let data = await response.json();
const meals = data.data;


response = await fetch(`${API_BASE_URL}/api/dietary-categories?locale=${language}`);
data = await response.json();
const uniqueDietaryCategories = data.data;


---

<section class="py-16">
  <div class="container mx-auto px-6">
    <!-- Filter Bar -->
    <div class="mb-12">
      <h2 class="text-2xl font-bold text-gray-900 mb-6">Filter by Diet Type</h2>
      <div class="flex flex-wrap gap-4" id="filterBar">
        {uniqueDietaryCategories.map(category => (
          <button
            class={`px-6 py-2 rounded-full border-2 transition-all duration-200 filter-button bg-white border-${category.color}-800 text-${category.color}-800`}
            data-tag={category.name}
            data-active-class={`bg-${category.color}-800 text-white`}
            data-base-class={`bg-white border-${category.color}-800 text-${category.color}-800`}
          >
            {category.name}
          </button>
        ))}
      </div>
    </div>

    <!-- Meal Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {meals.map(meal => (
        <article class="meal-card bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow" data-tags={meal.dietary_categories.join(',')}>
          <div class="relative h-48">
            <img src={`${API_BASE_URL}${meal.image.url}`} alt={meal.name} class="w-full h-full object-cover" />
          </div>
          
          <div class="p-6">
            <h3 class="text-xl font-bold text-gray-900 mb-2">{meal.name}</h3>
            <p class="text-gray-600 mb-4">{meal.short_description}</p>
            
            <div class="flex flex-wrap gap-2 mb-4">
              {meal.dietary_categories.map(category => (
                <span class={`px-3 py-1 rounded-full text-sm font-medium bg-${category.color}-100 text-${category.color}-800`}>
                  {category.name}
                </span>
              ))}
            </div>

            <div class="grid grid-cols-4 gap-2 py-4 border-t border-gray-100">
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.calories}</span>
                <span class="text-xs text-gray-500">kcal</span>
              </div>
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.protein}g</span>
                <span class="text-xs text-gray-500">protein</span>
              </div>
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.carbs}g</span>
                <span class="text-xs text-gray-500">carbs</span>
              </div>
              <div class="text-center">
                <span class="block text-sm font-semibold text-gray-900">{meal.fat}g</span>
                <span class="text-xs text-gray-500">fat</span>
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

<script>
  let activeFilters = new Set();

  function updateMealVisibility() {
    const mealCards = document.querySelectorAll('.meal-card');
    
    if (activeFilters.size === 0) {
      // If no filters are active, show all meals
      mealCards.forEach(card => card.style.display = 'block');
      return;
    }

    mealCards.forEach(card => {
      const cardTags = new Set(card.dataset.tags.split(','));
      // Show card if it has ALL active filters
      const shouldShow = Array.from(activeFilters).every(filter => cardTags.has(filter));
      card.style.display = shouldShow ? 'block' : 'none';
    }); 
  }

  // Set up filter buttons
  document.querySelectorAll('.filter-button').forEach(button => {
    button.addEventListener('click', () => {
      const tag = button.dataset.tag;
      const activeClass = button.dataset.activeClass;
      const baseClass = button.dataset.baseClass;
      
      if (activeFilters.has(tag)) {
        // Remove filter
        activeFilters.delete(tag);
        button.classList.remove(...activeClass.split(' '));
        button.classList.add(...baseClass.split(' '));
      } else {
        // Add filter
        activeFilters.add(tag);
        button.classList.remove(...baseClass.split(' '));
        button.classList.add(...activeClass.split(' '));
      }
      
      updateMealVisibility();
    });
  });
</script>

<style>
  .meal-card {
    transition: opacity 0.3s ease-in-out;
  }
</style>