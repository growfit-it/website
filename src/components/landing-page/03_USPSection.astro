---
const { language = "fi" } = Astro.props;
import { API_BASE_URL } from '../../config/api';

const endpoint = 'unique-selling-points';
const params = {
  'populate[image]': true,
  'populate[cta]': true,
  'locale': language
};

const url_params = Object.entries(params).map(([k, v]) => `${k}=${v}`).join('&');
const response = await fetch(`${API_BASE_URL}/api/${endpoint}?${url_params}`);
const data = await response.json();
const uspPoints = data.data;
---

<section class="py-20">
  <h2 class="text-4xl font-bold text-gray-900 text-center mb-16" style="font-family: Coolvetica; color: #333;">
    How growfit works
  </h2>

  <div id="usp-scroll-wrapper" class="relative w-full h-[640px] overflow-hidden">
    <div id="usp-scroll-content" class="snap-y snap-mandatory h-full overflow-hidden relative z-10" style="scrollbar-width: none; -ms-overflow-style: none;">
      <style is:global>
        #usp-scroll-content::-webkit-scrollbar {
          display: none;
        }
      </style>

      <div class="w-full h-full px-4 sm:px-8 lg:px-16 xl:px-24 2xl:px-32 max-w-[1600px] mx-auto">
        {uspPoints.map((point, index) => (
          <div id={`usp-${index}`} class="snap-start w-full h-full flex flex-col md:flex-row items-start justify-between gap-8 opacity-0 transition-opacity duration-700 ease-in-out">
            <div class="flex-shrink-0 w-full md:w-[580px]">
              <div class="bg-white rounded-2xl overflow-hidden h-[288px] sm:h-[300px] md:h-[562px]">
                <img
                  src={`${API_BASE_URL}${point.image?.formats?.large?.url || ''}`}
                  class="w-full h-full object-cover"
                  alt={point.title}
                />
              </div>
            </div>

            <div class="w-full flex-1 flex items-start justify-start">
              <div class="flex flex-col sm:flex-row gap-4 items-start pt-6 sm:pt-8 md:pt-12">
                <div class="w-20 h-20 min-w-[80px] flex items-center justify-center rounded-full bg-white border border-primary">
                  <span class="text-primary font-bold text-2xl">{String(index + 1).padStart(2, '0')}</span>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-primary font-helvetica mb-2 leading-snug">{point.title}</h3>
                  <p class="text-primary text-sm font-helvetica mb-4 leading-relaxed">{point.description}</p>
                  {point.cta?.ButtonURL && point.cta?.ButtonLabel && (
                    <a href={point.cta.ButtonURL} class={`inline-block px-6 py-2 text-sm rounded-full font-helvetica transition-colors whitespace-nowrap ${
                      point.cta.ButtonType === 'primary'
                        ? 'bg-secondary text-white hover:bg-secondary/90'
                        : 'border border-primary text-primary hover:bg-primary/5'
                    }`}>
                      {point.cta.ButtonLabel}
                    </a>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <script is:browser>
    const scrollWrapper = document.getElementById('usp-scroll-content');
    const sections = document.querySelectorAll('#usp-scroll-content > div > div');
    const container = document.getElementById('usp-scroll-wrapper');

    let activeIndex = 0;
    let isThrottled = false;
    const sectionHeight = container.clientHeight;

    const setActiveSection = (index) => {
      sections.forEach((section, idx) => {
        section.style.opacity = idx === index ? '1' : '0';
        section.style.pointerEvents = idx === index ? 'auto' : 'none';
      });
    };

    setActiveSection(0);

    const scrollToIndex = (index) => {
      scrollWrapper.scrollTo({ top: index * sectionHeight, behavior: 'smooth' });
      setActiveSection(index);
    };

    const unlockScroll = () => {
      container.style.overflow = 'visible';
      scrollWrapper.removeEventListener('wheel', scrollHandler, { passive: false });
    };

    const scrollHandler = (e) => {
      e.preventDefault();
      if (isThrottled) return;

      const delta = e.deltaY;
      const maxIndex = sections.length - 1;

      if (delta > 0 && activeIndex < maxIndex) {
        activeIndex++;
        scrollToIndex(activeIndex);
      } else if (delta < 0 && activeIndex > 0) {
        activeIndex--;
        scrollToIndex(activeIndex);
      } else if ((delta > 0 && activeIndex === maxIndex)) {
        unlockScroll();
        return;
      } else if ((delta < 0 && activeIndex === 0)) {
        unlockScroll();
        return;
      }

      isThrottled = true;
      setTimeout(() => {
        isThrottled = false;
      }, 800);
    };

    scrollWrapper.addEventListener('wheel', scrollHandler, { passive: false });

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && container.style.overflow === 'visible') {
          container.style.overflow = 'hidden';
          scrollWrapper.addEventListener('wheel', scrollHandler, { passive: false });
        }
      });
    }, { threshold: 0.6 });

    observer.observe(container);
  </script>
</section>
