---
import LoginForm from './LoginForm';
import { ShoppingBagIcon, GlobeIcon } from './icons';
import { API_BASE_URL } from '../config/api';

// Language handling
const { language = "fi" } = Astro.props;
const languages = [
  { code: 'fi', name: 'Finnish' },
  { code: 'en', name: 'English' },
  { code: 'sv', name: 'Swedish' }
];
const languageName = languages.find(lang => lang.code === language)?.name || 'Finnish';

// Fetch CMS data
const response = await fetch(`${API_BASE_URL}/api/nav-bars?populate[buttons]=true&populate[links]=true&populate[logo]=true&locale=${language}`);
const data = await response.json();
const { buttons, links, logo } = data.data[0];


// URL Helper
const getUrl = (url: string) => { if (url.startsWith('#') || url.startsWith('javascript:') || url.startsWith('http')) {return url;}return `/${language}${url}`;};
---

<nav class="fixed top-0 w-full bg-white shadow-lg z-50">
  <div class="container mx-auto px-6 py-4">
    <div class="flex items-center justify-between">
      <!-- Left Group -->
      <div class="flex items-center space-x-8">
        <a href={`/${language}`} class="flex-shrink-0">
          <img style="width: 150px" src={`${API_BASE_URL}${logo.url}`} alt="main-logo">
        </a>

        <div class="hidden lg:flex items-center space-x-8">
          {links.map(link => (
            <a href={getUrl(link.LinkUrl)} class="text-primary-600 hover:text-primary">{link.LinkLabel}</a>
          ))}
        </div>
      </div>

      <!-- Right Group -->
      <div class="flex items-center space-x-4">
        <div class="relative">
          <button id="cartButton" class="text-primary-600 hover:text-primary">
            <Fragment set:html={ShoppingBagIcon} />
            <div id="cartCount" class="absolute bottom-0 right-0 bg-[#98C47C] text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
              0
            </div>
          </button>
        </div>

        <!-- Desktop Buttons -->
        <div class="hidden lg:flex items-center space-x-4">          
          {buttons.map(button => (
            <a               
              href={getUrl(button.ButtonURL)} 
              class={`flex items-center justify-center h-[44px] px-6 ${
                button.ButtonType === 'primary'
                  ? 'bg-secondary text-white hover:bg-secondary/90' 
                  : 'border-2 border-[#27486D] text-primary hover:bg-primary/5'
              } rounded-full transition-colors`}
            >
              {button.ButtonLabel}
            </a>
          ))}
        </div>

        <!-- Language Selector -->
        <div class="hidden lg:block relative group">
          <button class="flex items-center space-x-2 text-primary-600 hover:text-primary">
            <Fragment set:html={GlobeIcon} />
            <span>{language.toUpperCase()}</span>
          </button>
          <div class="absolute right-0 mt-2 py-2 w-32 bg-white rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300">
            {languages.map(lang => (
              <button 
                data-lang={lang.code}
                class={`block w-full px-4 py-2 text-left text-primary-600 hover:bg-gray-100 ${language === lang.code ? 'bg-gray-50' : ''}`}
              >
                {lang.name}
              </button>
            ))}
          </div>
        </div>

        <!-- Mobile Menu Button -->
        <button id="menuButton" class="lg:hidden p-2 rounded-lg hover:bg-gray-100 focus:outline-none">
          <div class="w-6 h-0.5 bg-primary mb-1.5"></div>
          <div class="w-6 h-0.5 bg-primary mb-1.5"></div>
          <div class="w-6 h-0.5 bg-primary"></div>
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div id="mobileMenu" class="hidden lg:hidden">
      <div class="pt-4 pb-3 space-y-3">
        <!-- Mobile Language Selector -->
        <div class="px-4 py-2 mb-4 border-b border-gray-100">
          <div class="flex items-center mb-2">
            <Fragment set:html={GlobeIcon} />
            <span class="ml-2 text-sm text-gray-500">Select Language</span>
          </div>
          <div class="grid grid-cols-3 gap-2">
            {languages.map(lang => (
              <button 
                data-lang={lang.code}
                class={`px-3 py-2 rounded-lg text-sm transition-colors ${
                  language === lang.code ? 'bg-primary text-white' : 'bg-gray-50 text-primary-600 hover:bg-gray-100'
                }`}
              >
                {lang.code.toUpperCase()}
              </button>
            ))}
          </div>
        </div>

        {links.map(link => (
          <a href={getUrl(link.LinkUrl)} class="block px-4 py-2 text-primary-600 hover:bg-gray-100 rounded-lg">
            {link.LinkLabel}
          </a>
        ))}

        <!-- Mobile Buttons -->
        <div class="px-4 space-y-2">          
          {buttons.map(button => (
            <a 
              href={getUrl(button.ButtonURL)} 
              class={`block w-full py-2 rounded-lg text-center ${
                button.ButtonType === 'primary'
                  ? 'bg-secondary text-white hover:bg-secondary/90' 
                  : 'border-2 border-[#27486D] text-primary hover:bg-primary/5'
              }`}
            >
              {button.ButtonLabel}
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</nav>

<div id="loginModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
  <LoginForm client:load />
</div>

<!-- JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', () => {
  const menuButton = document.getElementById('menuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  const loginButtons = document.querySelectorAll('#loginButton');
  const loginModal = document.getElementById('loginModal');
  const languageButtons = document.querySelectorAll('[data-lang]');
  const cartButton = document.getElementById('cartButton');
  const cartCount = document.getElementById('cartCount');

  let count = parseInt(localStorage.getItem('cartCount') || '0');
  cartCount.textContent = count;

  cartButton.addEventListener('click', () => {
    count = (count + 1) % 10;
    localStorage.setItem('cartCount', count);
    cartCount.textContent = count;
  });

  loginButtons.forEach(btn => btn.addEventListener('click', () => loginModal.classList.remove('hidden')));
  window.closeLoginModal = () => loginModal.classList.add('hidden');

  languageButtons.forEach(button => button.addEventListener('click', () => {
    const lang = button.getAttribute('data-lang');
    localStorage.setItem('preferredLanguage', lang);
    window.location.href = `/${lang}`;
  }));

  menuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));
  document.addEventListener('click', (e) => {
    if (!e.target.closest('#menuButton, #mobileMenu')) mobileMenu.classList.add('hidden');
    if (e.target === loginModal) loginModal.classList.add('hidden');
  });
});
</script>